// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.4.5.71");
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "1.0.2";
	ПараметрыРегистрации.Наименование = "Отправка ошибок ЖР на почту";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Информация = "Отправка ошибок ЖР на почту";
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр("ru = 'Отправка ошибок ЖР на почту'");
	НоваяКоманда.Идентификатор = "ОтправкаОшибокЖРНаПочту";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр("ru = 'Форма настройки и запуска вручную'");
	НоваяКоманда.Идентификатор = "НастроитьИВыполнитьВручную";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Интерфейс для запуска логики обработки.
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	// Диспетчеризация обработчиков команд.
	Если ИдентификаторКоманды = "ОтправкаОшибокЖРНаПочту" Тогда
		ОтправитьОшибкиЖРНаПочту(ПараметрыВыполненияКоманды);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьОшибкиЖРНаПочту(ПараметрыВыполнения)

    ТекДата = ТекущаяДатаСеанса();
	ДатаНачала = НачалоДня(НачалоДня(ТекДата) - 1); // начало вчерашнего дня
	ДатаОкончания = КонецДня(ДатаНачала); // конец вчерашнего дня
	// Колонки = "Дата, Пользователь, Компьютер, Событие, Комментарий, Метаданные, Данные, ПредставлениеДанных, ИмяПользователя, ПредставлениеПриложения, ПредставлениеСобытия, ПредставлениеМетаданных";
	Колонки = "Событие, Комментарий";
	
	ЖР = ПолучитьДанныеЖР(ДатаНачала, ДатаОкончания, Колонки);

	Получатели = ПолучитьПолучателейИзНастроек(ПараметрыВыполнения);
	Если Получатели.Количество() = 0 Тогда
		ВызватьИсключение "Не настроены адреса эл.почты получателей ошибок журнала регистрации!
							| - Зайдите в <Дополнительные отчеты и обработки>,
							| - Найдите обработку <Отправка ошибок ЖР на почту>,
							| - Запустите команду <Форма настройки и запуска вручную>,
							| - В форме настройки укажите адреса эл.почты получателей и нажмите <Записать настройки>.
							|";
	КонецЕсли; 

	Тема = СтрШаблон("%1: ошибки ЖР за период с %2 по %3", СтрокаСоединенияИнформационнойБазы(), ДатаНачала, ДатаОкончания);

	ТекстПисьма = ПолучитьТекстПисьма(ЖР);

	ОтправитьПисьмо(Получатели, Тема, ТекстПисьма);
	
КонецПроцедуры

Процедура ОтправитьПисьмо(Получатели, Тема, ТекстПисьма)
	
	УчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	//Если НЕ РаботаСПочтовымиСообщениями.УчетнаяЗаписьНастроена(УчетнаяЗапись, Истина) Тогда
	//	ВызватьИсключение "Системная учетная запись почты не настроена для отправки!";
	//КонецЕсли;
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Кому", СтрСоединить(Получатели, ";"));
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
	
	Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыПисьма);
	
	РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗапись, Письмо);
	
КонецПроцедуры

Функция ПолучитьДанныеЖР(ДатаНачала, ДатаОкончания = Неопределено, Колонки = Неопределено)
	
	ЖР = Новый ТаблицаЗначений;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДатаНачала", ДатаНачала);
	Отбор.Вставить("ДатаОкончания", ДатаОкончания);
	Отбор.Вставить("Уровень", УровеньЖурналаРегистрации.Ошибка);
	
	ВыгрузитьЖурналРегистрации(ЖР, Отбор, Колонки);
	
	Возврат ЖР;
	
КонецФункции

Функция ПолучитьТекстПисьма(ЖР)
	
	ВремТЗ = ЖР.Скопировать();
	ВремТЗ.Колонки.Добавить("Колво");
	ВремТЗ.ЗаполнитьЗначения(1, "Колво");
	ВремТЗ.Свернуть("Событие, Комментарий", "Колво");
	
	МассивСтрок = Новый Массив;
	
	ИменаКолонок = Новый Массив;
	Для Каждого Колонка Из ВремТЗ.Колонки Цикл
		ИменаКолонок.Добавить(Колонка.Имя);
	КонецЦикла;	

	МассивСтрок.Добавить("<html>");
	МассивСтрок.Добавить("<body>");	
	МассивСтрок.Добавить("<table border=1>");

	МассивСтрок.Добавить("<tr>");
	Для Каждого ИмяКолонки Из ИменаКолонок Цикл
		Стр = СтрШаблон("<th>%1</th>", HTMLСтрока(ИмяКолонки));
		МассивСтрок.Добавить(Стр);
	КонецЦикла;	
	МассивСтрок.Добавить("</tr>");
	
	Для Каждого СтрокаТаблицы Из ВремТЗ Цикл
		МассивСтрок.Добавить("<tr>");
		Для Каждого ИмяКолонки Из ИменаКолонок Цикл
			Стр = СтрШаблон("<td><pre>%1</pre></td>", HTMLСтрока(СтрокаТаблицы[ИмяКолонки]));
			МассивСтрок.Добавить(Стр);
		КонецЦикла;	
		МассивСтрок.Добавить("</tr>");
	КонецЦикла;

	МассивСтрок.Добавить("</table>");
	МассивСтрок.Добавить("</body>");
	МассивСтрок.Добавить("</html>");
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
		
КонецФункции

Функция ПолучитьПолучателейИзНастроек(ПараметрыВыполнения)
		
	Получатели = Новый Массив;
	
	Если ПараметрыВыполнения.Свойство("ДополнительнаяОбработкаСсылка") Тогда
		ОбработкаСсылка = ПараметрыВыполнения.ДополнительнаяОбработкаСсылка;
		Если ЗначениеЗаполнено(ОбработкаСсылка) Тогда
			ХН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбработкаСсылка, "ХранилищеНастроек");
			МассивПолучателей = ХН.Получить();
			Если ТипЗнч(МассивПолучателей) = Тип("Массив") Тогда
				Получатели = МассивПолучателей;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Получатели;
	
КонецФункции

Функция HTMLСтрока(Текст)
	
	Результат = СтрЗаменить(Текст,     "&",  "&amp;");
	Результат = СтрЗаменить(Результат, "'",  "&apos;");
	Результат = СтрЗаменить(Результат, "<",  "&lt;");
	Результат = СтрЗаменить(Результат, ">",  "&gt;");
	Результат = СтрЗаменить(Результат, """", "&quot;");

	//Результат = СтрЗаменить(Результат, Символы.ПС, "<br>");
	
	Возврат Результат;
	
КонецФункции